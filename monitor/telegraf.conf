[agent]
  omit_hostname = true

[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}"]
  token = "${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}"
  organization = "${DOCKER_INFLUXDB_INIT_ORG}"
  bucket = "${DOCKER_INFLUXDB_INIT_BUCKET}"

[[outputs.file]]
  files = ["stdout", "/tmp/metrics.out"]
  
[[inputs.mqtt_consumer]]
  servers = ["${MQTT_HOST}"]
  topics = [
    "zone/+/field/+/sensor/+/+" # /zone/:zoneId/field/:fieldId/sensor/:sensorId/:sensorType
  ]
  data_format = "json"
  json_string_fields  = ["value"]
  
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "zone/+/field/+/sensor/+/+" # /zone/:zoneId/field/:fieldId/sensor/:sensorId/:sensorType
    measurement = "measurement/_/_/_/_/_/_"
    tags = "_/zone_id/_/field_id/_/sensor_id/sensor_type"

[[inputs.mqtt_consumer]]
  servers = ["${MQTT_HOST}"]
  topics = [
    "zone/+/field/+/actuator/+/+/consumption" # /zone/:zoneId/field/:fieldId/actuator/:actuatorId/:actuatorType/consumption
  ]
  data_format = "json"
  json_string_fields  = ["value"]
  tag_keys = ["measurement"]
  
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "zone/+/field/+/actuator/+/+/consumption" # /zone/:zoneId/field/:fieldId/actuator/:actuatorId/:actuatorType/consumption
    measurement = "measurement/_/_/_/_/_/_/_"
    tags = "_/zone_id/_/field_id/_/actuator_id/actuator_type/_"